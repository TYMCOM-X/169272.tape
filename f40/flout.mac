TITLE FLOUT.   	FLOATING POINT OUTPUT	FORTRAN IV
SUBTTL	V32/01	25-SEP-72	DP IN F FORMAT	/DLH

; FROM V32(370)	9-MARCH-72	D. M. NIXON & T. W. EGGERS
;***COPYRIGHT 1969,1970,1971,1972 DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***


;REENT==1 FOR RE-ENTRANT OPERATING SYSTEM
IFNDEF REENT,<REENT==0>
IFN REENT,<	HISEG	>
IFNDEF ASTFL,<ASTFL==1	;GIVES ASTERISK CONVERSION ON FORMAT OVERFLOW>

;"FLOUT." IS A ROUTINE WHICH OUTPUTS FLOATING POINT NUMBERS, IN
;E, F, OR G FORMAT.  THE NUMBERS ARE CONTAINED IN AC0 ON ENTRY.
;"DEPOT." IS AN EXTERNAL ROUTINE WHICH OUTPUT THE CHARS IN AC0;

;  CALLING SEQUENCE:
;	PUSHJ P,FLOUT.
;  PUSH DOWN LIST CONTAINS:
;	1.  FORMAT WORD CONSTRUCTED AS FOLLOWS:
;	    BIT 0:  0 = F TYPE CONVERSION
;	            1 = E TYPE CONVERSION
;	        1:  1 = G TYPE CONVERSION
;		2:  1 = DOUBLE PRECISION
;	     4-10:  D - NO. OF DIGITS FOLLOWING THE DECIMAL POINT
;	    11-17:  W - FIELD WIDTH; W=0, VARIABLE FIELD
;	    18-35:  N - SCALE FACTOR
;	2.  PROGRAM COUNTER

	NA==15		;NO. OF AC'S TO BE STORED
	AC0=0		;FLOATING POINT NO. ON ENTRY
	AC1=1		;USED IN FORMING DIGITS
	AC2=2		;DITTO. D.P. ONLY
	XP=3		;DECIMAL EXPONENT
	W=4		;FIELD WIDTH/NO. OF BLANKS TO OUTPUT
	D=5		;D, NO. OF DIGITS AFTER DEC. POINT
	C=6		;CNTR./NO. OF CHARS BEFORE DEC. POINT
	G==7		;UNUSED,NEEDED BY DEPOT...RESTORED AT END
	SF=10		;SCALE FACTOR
	F=11		;FLAG AND FORMAT WORD
	T=12		;TEMP
	T1=13
	T2=14
	T3=15
	P=17		;PUSHDOWN POINTER

	ETYPE==(1B0)	;E TYPE CONVERSION (NOT F)
	GTYPE==(1B1)	;G TYPE CONVERSION
	DTYPE==(1B2)	;DOUBLE PRECISION
	NUMSGN==(1B3)	;NEGATIVE NUMBER
	DIGEXH==(1B4)	;DIGITS EXHAUSTED
	NOSIGN==(1B5)	;NO SPACE FOR + SIGN

	SEARCH	DEF40
	SPMAX==9	;MAXIMUM NO. OF DIGITS TO OUTPUT (SINGLE PRECISION)
IFN KA10,<DPMAX==^D16>	;DITTO. (DOUBLE PRECISION)
IFE KA10,<DPMAX==^D18>
	DPMIN==SPMAX	;NO. OF DIGITS IF LS. WORD IS NOT SIGNIFICANT

	ENTRY	FLOUT.,DOUBT.
	EXTERN	DEPOT.,EXP10.,HITEN.,LOTEN.,PTLEN.
	EXTERN	TYPE.		;**V32/01**
IFN ASTFL,<EXTERN	ASTRK.>

DOUBT.:
FLOUT.:	PUSH	P,1		;STORE ACCS ON STACK
	MOVEI	1,1(P)
	HRLI	1,2
	ADD	P,[NA,,NA]
	BLT	1,(P)
	MOVE	F,-2-NA(P)	;PICK UP FORMAT WORD
	MOVEM	G,GSAVE		;**V32/01** SAVE G
	MOVE	G,TYPE.		;**V32/01** PICK UP TYPE
	CAIE	G,6		;**V32/01** DOUBLE PRECISION?
	TDZA	AC1,AC1		;NO, CLEAR LOW ORDER WORD
	MOVE	AC1,-NA(P)	;YES, RESTORE LOW ORDER WORD
	TLZ	F,NUMSGN!DIGEXH!NOSIGN
	SETZB	XP,SF		;CLEAR EXPONENT AND SCALE FACTOR
	TLNN	F,GTYPE		;IGNORE SCALE FACTOR FOR NOW IF G CONVERSION
	HRRE	SF,F		;GET SCALE FACTOR
	JUMPGE	AC0,FLOUT1	;NUMBER NEGATIVE?
	DFN	AC0,AC1		;YES, NEGATE IT
	TLOA	F,NUMSGN	;AND - SET SIGN FLAG

FLOUT1:	JUMPE	AC0,FLOUT7	;ESCAPE IF ZERO
	HLRZ	T,AC0		;EXTRACT EXPONENT
	LSH	T,-9
IFN KA10,<CAIL	T,^D27		;LOW HALF INVALID?
	JRST	.+3		;NO
	TLZE	F,DTYPE		;YES, SINGLE PRECISION ONLY
	TLO	F,ETYPE		;IF D.P., FORCE E TYPE
	LSH	AC1,8		;GET RID OF LOW EXP>
	TLZ	AC0,777000	;GET RID OF HIGH EXP
	ASHC	AC0,8		;PUT BIN POINT BETWEEN BITS 0 AND 1
FLOUT2:	HRREI	T1,-200+2(T)	;GET RID OF EXCESS 200, +2 IS A DIDDLE
	IMULI	T1,232	;DEC EXP=LOG10(2)*BIN EXP=.232(OCTAL)*BIN EXP
	ASH	T1,-^D9		;GET RID OF 3 OCTAL FRACTION DIGITS
		;T1 HOLDS A FIRST TRIAL DECIMAL EXPONENT. IT MAY BE
		;ONE (BUT NO MORE) TOO SMALL TO DIVIDE THE BINARY NUM
		;BY TO GET THE RANGE 1.0 .GT. NUM .GE. 0.1
	MOVM	T2,T1		;GET MAGNITUDE OF *10 SCALER
	CAIGE	T2,PTLEN.	;IS THE POWER OF 10 TABLE LARGE ENOUGH
	JRST	FLOUT3		;YES
	SKIPL	T1		;NO, SCALE 1ST BY LARGEST ENTRY
	SKIPA	T1,[PTLEN.]	;GET ADR OF LARGEST POSITIVE POWER OF 10
	MOVNI	T1,PTLEN.	;GET ADR OF LARGEST NEG POWER OF 10
	CAIN	G,6		;**V32/01** DOUBLE PRECISION?
	JRST	[PUSHJ	P,DPMUL	;SCALE BY LARGE POWER OF 10
		JRST	FLOUT2]	;GO DO 2ND SCALING
	PUSHJ	P,BINEXP	;GET CORRESPONDING BINARY POWER OF 2
	PUSHJ	P,FLODIV	;SCALE NUMBER BY A LARGE POWER OF 10
	JRST	FLOUT2		;AND GO DO THE SECOND SCALING

		;GET BINARY EXPONENT OF POWER OF 10, GIVEN DECIMAL EXP
BINEXP:	MOVE	T2,T1		;COPY DECIMAL POWER OF 10
	LSHC	T2,-2		;DIVIDE BY 4, EXP10. HAS 4 ENTRIES/WORD
	TLNE	T3,(1B0)	;WHICH HALF OF WORD?
	SKIPA	T2,EXP10.(T2)	;RIGHT HALF
	HLRZ	T2,EXP10.(T2)	;LEFT HALF
	TLNN	T3,(1B1)	;WHICH QUADRANT
	LSH	T2,-^D9		;1ST OR 3RD
	ANDI	T2,777		;MASK TO SIZE
	POPJ	P,

		;SCALE DOUBLE FRACTION BY A POWER OF 10
DPMUL:	JUMPE	T1,CPOPJ	;IF DEC EXP IS 0, RETURN
	ADD	XP,T1		;PUT DEC SCALE FACTOR INTO XP
	MOVN	T1,T1		;TAKE RECIPROCAL OF EXPONENT
	PUSHJ	P,BINEXP	;GET CORRESPONDING BIN EXP
	ADDI	T,-200(T2)	;ADD POWER EXP INTO FRAC EXP
	MUL	AC1,HITEN.(T1)	;FORM FIRST CROSS PRODUCT
	MOVE	T2,AC0		;COPY HI FRACTION
	MUL	T2,LOTEN.(T1)	;FORM 2ND CROSS PRODUCT
	TLO	T2,(1B0)	;AVOID OVERFLOW
	ADD	T2,AC1		;ADD CROSS PRODUCTS	
	MUL	AC0,HITEN.(T1)	;FORM HI PRODUCT
	TLON	T2,(1B0)	;DID CROSS PRODUCT OVERFLOW
	ADDI	AC0,1		;YES
	ADD	AC1,T2		;ADD CROSS PRODUCTS IN
	TLZN	AC1,(1B0)	;OVERFLOW?
	ADDI	AC0,1		;YES
	TLNE	AC0,(1B1)	;NORMALIZED?
	POPJ	P,		;YES
	ASHC	AC0,1		;NO, SHIFT LEFT ONE
	SOJA	T,CPOPJ		;AND ADJUST EXPONENT

		;SCALE SINGLE FRACTION BY A POWER OF 10
FLODIV:	JUMPE	T1,CPOPJ	;IF DEC EXP IS ZERO, RETURN
	ADD	XP,T1		;PUT DEC SCALE FACTOR INTO XP
	SUBI	T,-200-1(T2)	;SUB BIN POWER OF 10 EXP FROM BIN FRACTION EXP
				;REMOVE EXCESS 200; -1 ALLOWS FOR ASHC
				;LEFT HALF OF T GETS GARBAGED
	MOVEI	AC1,0		;CLEAR LOW WORD OF BIN FRACTION
	CAMGE	AC0,HITEN.(T1)	;WILL DIV CAUSE DIVIDE CHECK?
	SOJA	T,.+2		;NO, ALLOW FOR NOT DOING ASHC
	ASHC	AC0,-1		;YES, SCALE FRACTION
	DIV	AC0,HITEN.(T1)	;SCALE FRACTION BY POWER OF 10
CPOPJ:	POPJ	P,		;RETURN

FLOUT3:	PUSHJ	P,BINEXP	;GET BIN EXP THAT MATCHES DEC EXP
	CAIN	G,6		;**V32/01** DOUBLE PRECISION?
	JRST	FLOT3A		;YES
	CAILE	T2,(T)		;IS THIS POWER OF 10 .GT. FRACTION?
	JRST	FLOUT4		;YES, IN THE EXPONENT
	CAIN	T2,(T)		;MAYBE, LOOK AT EXPONENTS SOME MORE
	CAML	AC0,HITEN.(T1)	;EXPONENTS THE SAME, COMPARE FRACTIONS
	AOJA	T1,FLOUT3	;POWER OF 10 IS ONE TOO SMALL
FLOUT4:	PUSHJ	P,FLODIV	;POWER OF 10 IS OK, DO THE SCALING
	ASH	AC0,-200(T)	;SCALE FRACTION RIGHT BY ANY REMAINING POWERS OF 2
	JRST	FLOUT7

FLOT3A:	CAILE	T2,(T)		;FRACTION .GT. POWER OF 10?
	JRST	FLOT4A		;YES
	CAIE	T2,(T)
	AOJA	T1,FLOT4A	;NOT IN EXPONENT
	CAMGE	AC0,HITEN.(T1)	;
	JRST	FLOT4A		;YES, IN HIGH FRACTION
	CAMN	AC0,HITEN.(T1)
	CAML	AC1,LOTEN.(T1)
	ADDI	T1,1		;NO, IN FRACTION PART
FLOT4A:	PUSHJ	P,DPMUL		;SCALE BY POWER OF 10
	ASHC	AC0,-200(T)	;SCALE BY ANY REMAINING POWERS OF 2
FLOUT7:	LDB	W,[POINT 7,F,17]
	LDB	D,[POINT 7,-NA-2(P),10]	;MUST PICKUP FROM STACK
	JUMPN	W,FLOUT8
	CAIN	G,6		;DOUBLE PRECISION?
	ADDI	W,1		;YES, INCREMENT INDEX INTO TABLE
	HRRZ	D,FRMTAB(W)	;PICKUP DEFAULT FORMAT FOR D
	HLRZ	W,FRMTAB(W)	;SAME FOR W
FLOUT8:	TLNN	F,ETYPE!DTYPE!GTYPE	;E, D OR G TYPE?
	ADD	SF,XP		;SCALE BY EXPONENT FOR F TYPE
FLOUT9:	MOVE	T1,D
	ADD	T1,SF		;SCALE FACTOR TO
	CAILE	T1,DPMAX	;TOO MANY DECIMAL PLACES
	MOVEI	T1,DPMAX	;YES, REDUCE TO MAX POSSIBLE
	CAIE	G,6		;**V32/01** DONE IF DOUBLE PRECISION
	CAIGE	T1,SPMAX	;TOO MANY DECIMAL PLACES?
	JRST	DIGOK		;NO,  SIZE OK
	MOVEI	T1,SPMAX	;YES, REPLACE BY MAX PERMITTED
	TLNN	F,(177B17)	;FREE FORMAT?
	SUBI	T1,1		;YES, ONE LESS DIGIT HELPS ROUNDING
DIGOK:	MOVE	T,P		;MARK BOTTOM OF DIGIT STACK
	PUSH	P,[0]		;AND ALLOW FOR POSSIBLE OVERFLOW
	SKIPGE	T2,T1		;GET # OF DIGITS INTO T2
	MOVEI	T2,0		;IF NEGATIVE, ADD 0.5 TO FRACTION
	ADD	AC0,RNDHGH(T2)	;ROUND HI WORD TO CORRECT NUMBER OF DIGITS
	CAIN	G,6		;**V32/01** DOUBLE PRECISION?
	JRST	DIGOK3		;YES
	ADDI	AC0,1		;NO ROUND SLIGHTLY MORE
	TLZN	AC0,(1B0)	;DID CARRY PROPOGATE TO BIT 0?
	AOS	(P)		;YES, PROPOGATE CARRY TO LEADING 0
FLOU11:	MULI	AC0,^D10	;MULTIPLY BY 10
	PUSH	P,AC0		;STORE DIGIT ON DIGIT STACK
	MOVE	AC0,AC1		;AND SET UP NEW FRACTION
	SOJG	T2,FLOU11
	JRST	FLOU13

DIGOK3:	ADD	AC1,RNDLOW(T2)	;ROUND LOW
	TLZN	AC1,(1B0)	;CARRY?
	ADDI	AC0,1		;YES
	TLZN	AC0,(1B0)	;DID CARRY PROPAGATE TO BIT 0
	AOS	(P)		;YES , LEADING DIGIT IS A 1
FLOU12:	EXCH	AC0,AC1		;PUT HI WORD IN AC1
	MULI	AC1,^D10	;MUL HI WORD BY 10
	PUSH	P,AC1		;STORE DIGIT ON STACK
	MULI	AC0,^D10	;MUL LOW WORD BY 10
	TLO	AC0,(1B0)	;STOP OVERFLOW
	ADD	AC0,AC2		;ADD HI WORD BACK INTO AC0
	TLZN	AC0,(1B0)	;CARRY
	AOS	(P)		;YES, INCREMENT DIGIT ON STACK
	SOJG	T2,FLOU12	;LOOP
				;FALL INTO FLOU13
FLOU13:	MOVE	G,GSAVE		;**V32/01** RESTORE G
	MOVEI	T2,2(T)		;GET BASE OF STACKED DIGITS
	MOVE	T3,1(T)
	JUMPE	T3,FLOU14	;DID OVERFLOW OCCUR?
	SUBI	T2,1		;YES - MOVE BACK BASE POINTER
	ADDI	XP,1		;NO, INCREMENT EXPONENT
	TLNN	F,ETYPE!DTYPE	;IF F TYPE
	ADDI	SF,1		;INCREMENT SF ALSO

FLOU14:	TLNN	F,GTYPE		;G TYPE?
	JRST	FLOU16		;NO
	CAML	XP,[-1]		;XP .GE. -0.1
	CAIGE	D,(XP)		;WILL F FORMAT FIT?
	JRST	FLOU15		;NO USE E FORMAT
	MOVE	SF,XP		;PUT EXPONENT IN EXPECTED PLACE
	JRST	FLOU16		;CONTINUE WITH F CONVERSION
FLOU15:	TLO	F,ETYPE		;E TYPE CONVERSION
	HRRE	SF,F		;RESET SCALE FACTOR
FLOU16:	MOVE	C,W		;GET WIDTH
	SUBI	C,2(D)		;SIGN, POINT AND CHARS. FOLLOWING
	TLNE	F,GTYPE		;G CONVERSION?
	JRST	[TLNN	F,ETYPE!DTYPE	;E TYPE?
		SUBI	D,(SF)		;NO, REDUCE CHAR. AFTER POINT FOR F
		JRST	FLOU17]		;BUT IGNORE SCALE FACTOR IN WIDTH
	JUMPLE	SF,FLOU17	;IGNORE NEG SCALING
	SUBI	C,(SF)		;+SCALING
FLOU17:	TLNE	F,ETYPE!DTYPE!GTYPE	;SKIP IF JUST F TYPUBI	C,4		;ALLOW FOR E+00
TRYFIT:	JUMPGE	C,FIT		;WILL FIT FORMAT
	TLNN	F,NUMSGN	;IS SIGN POSITIVE
	AOJE	C,POSIGN	;YES, ALLOW IT
	TLNN	F,ETYPE!DTYPE	;IF E FORMAT
	TLZN	F,GTYPE		;WAS IT G TO F CONVERSION?
	JRST	NOFIT		;E TYPE OR NOT G TO F
	ADDI	C,3		;REMOVE 4 TRAILING SPACES
	JRST	TRYFIT		;AND TRY AGAIN

NOFIT:
IFN ASTFL,<MOVE	P,T		;RESTORE STACK POINTER
	PUSHJ	P,ASTRK.	;FIELD TOO SMALL
	JRST	RETRNO		;FILL WITH *'S AND EXIT>
IFE ASTFL,<ADD	SF,C		;LESS DIGITS TO OUTPUT
	ADD	T1,C		;AND LESS IN STACK
	SUB	T2,C		;ADJUST STACK POINTER>

FIT:	CAIG	C,1		;SPACE FOR LEADING BLANKS?
	JRST	GO2ERF		;NO LEADING BLANKS
	PUSHJ	P,SPACE		;OUTPUT ONE
	SOJA	C,FIT		;UNTIL ENOUGH

POSIGN:	TLO	F,NOSIGN	;SIGNAL NO ROOM FOR + SIGN
GO2ERF:	TLNN	F,ETYPE!DTYPE	;TEST FLOATING POINT FLAGS
	JRST	FFORM		;NO, USE FIXED POINT
				;FALL INTO EFORM
;E FORMAT

EFORM:	JUMPN	T1,.+2		;CHECK FOR NO SIGNIFICANT DIGITS
	TLO	F,DIGEXH	;ENSURE ZEROES WILL BE PRINTED
	JUMPE	SF,EFORM1	;LIFE IS SIMPLER IF NO SCALING
	SUB	XP,SF		;SCALE EXPONENT
	JUMPLE	SF,EFORM1	;JUMP IF NOT POSITIVE SCALING
	JUMPLE	C,.+3		;SEE IF SPACE LEFT FOR LEADING DIGIT
	TLNN	F,GTYPE		;GTYPE GETS SPACING CORRECT
	PUSHJ	P,SPACE		;SINCE +1 AND 0 SCALING
				;HAVE 1 DIGIT BEFORE POINT
	PUSHJ	P,SIGN		;OUTPUT SIGN
	PUSHJ	P,DIGIT		;OUTPUT LEADING DIGITS
	SOJN	T1,.+2		;COUNT EXPIRED?
	TLO	F,DIGEXH	;YES
	SOJN	SF,.-3		;RETURN FOR MORE
	JRST	EFORM2		;SKIP LEADING ZERO

EFORM1:	PUSHJ	P,SIGN		;OUTPUT SIGN
	JUMPLE	C,EFORM2	;NO SPACE LEFT FOR "0"
	PUSHJ	P,ZERO		;OUTPUT ZERO
EFORM2:	PUSHJ	P,DPOINT	;AND DECIMAL POINT
	JUMPGE	SF,EFORM3	;ACCOUNT FOR NEG SCALING
	ADD	D,SF		;NOT SO MANY DIGITS NOW
	PUSHJ	P,ZERO		;BY OUTPUTTING ZEROS
	AOJL	SF,.-1
EFORM3:	JUMPLE	D,EFORM4	;IF NOT ANY DIGITS AFTER POINT
	PUSHJ	P,DIGIT		;OUTPUT FRACTIONAL DIGIT
	SOJN	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	D,.-3		;RETURN IF MORE DIGITS

EFORM4:	MOVEI	AC0,"E"
	TLNE	F,DTYPE		;DOUBLE PRECISION?
	MOVEI	AC0,"D"		;YES, GIVE USUAL D INSTEAD
	PUSHJ	P,DEPOT.	;OUTPUT "E" OR "D"
	JUMPGE	XP,EFORM5
	TLO	F,NUMSGN	;TYPE MINUS IF EXPONENT NEGATIVE
EFORM5:	PUSHJ	P,PLUS		;PRINT SIGN
	MOVEI	C,2		;AND SET DIGIT COUNT
	MOVE	P,T		;RESTORE STACK POINTER
	MOVM	AC0,XP		;GET EXPONENT
	JRST	OUTP1		;AND LET OUTP1 DO THE WORK
;F FORMAT

FFORM:	JUMPLE	SF,FFORM3	;NO LEADING DIGITS
	SKIPLE	C		;ANY ROOM?
	PUSHJ	P,SPACE		;YES, ANOTHER BLANK THEN
	PUSHJ	P,SIGN		;OUTPUT SIGN
	PUSHJ	P,DIGIT		;OUTPUT INTEGRAL DIGIT
	SOJG	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	SF,.-3		;RETURN IF MORE DIGITS
	PUSHJ	P,DPOINT	;PRINT DECIMAL POINT

FFORM1:	JUMPE	D,FFORM2	;TEST FOR DIG AFTER POINT 
	PUSHJ	P,DIGIT		;OUTPUT FRACTIONAL DIGIT
	SOJG	T1,.+2		;TOTAL COUNT EXPIRED?
	TLO	F,DIGEXH	;YES - FLAG DIGITS EXHAUSTED
	SOJG	D,FFORM1	;RETURN IF MORE DIGITS

FFORM2:	MOVE	P,T		;RESTORE STACK
	TLNN	F,GTYPE		;G FORMAT REQUIRES 4 BLANKS
	JRST	RETRNO		;FINISHED
	MOVEI	C,4		;SET FOR 4
	PUSHJ	P,SPACE		;BLANKS
	SOJG	C,.-1
	JRST	RETRNO		;FINISHED

FFORM3:	ADD	D,SF		;REDUCE D IF SF NEGATIVE
	PUSHJ	P,SIGN		;OUTPUT SIGN
	SKIPLE	C		;IF ROOM FOR IT
	PUSHJ	P,ZERO		;OUTPUT "0"
	PUSHJ	P,DPOINT	;AND DEC. POINT
	JUMPGE	D,.+4		;IF D IS NEG. SF IS TOO BIG
	LDB	SF,[POINT 7,-NA-2(T),10]
	MOVNS	SF		;SO USE DIGIT WIDTH FOR ZEROS
	SETZ	D,		;AND NO DIGITS
	JUMPE	SF,FFORM1	;NOW FOR DIGITS
	PUSHJ	P,ZERO		;ZERO AFTER POINT
	AOJA	SF,.-2		;LOOP ON ZEROS
; OUTPUT ROUTINES

DPOINT:	MOVEI	AC0,"."		;DECIMAL POINT
	JRST	DEPOT.		;PRINT AND RETURN

SPACE:	MOVEI	AC0," "		;SPACE
	JRST	DEPOT.

ZERO:	MOVEI	AC0,"0"
	JRST	DEPOT.

PLUS:	MOVEI	AC0,"+"
	JRST	SIGN1
SIGN:	TLZE	F,NOSIGN	;NO ROON FOR SIGN?
	POPJ	P,		;JUST RETURN
	MOVEI	AC0," "
SIGN1:	TLZE	F,NUMSGN	;ALWAYS CLEAR FLAG
	MOVEI	AC0,"-"		;SELECT SIGN
	JRST	DEPOT.		;AND PRINT

DIGIT:	MOVEI	AC0,"0"
	TLNE	F,DIGEXH	;DIGITS EXHAUSTED?
	JRST	DEPOT.
	MOVE	AC0,(T2)	;GET NEXT DIGIT
	ADDI	AC0,"0"		;CONVERT TO ASCII
	AOJA	T2,DEPOT.	;AND PRINT

OUTP1:	MOVEI	XP,1		;SET UP DIGIT COUNT

OUTP2:	IDIVI	AC0,^D10	;AND GENERATE DIGITS IN REVERSE
	PUSH	P,AC1		;AND SAVE THEM ON THE STACK
	JUMPE	AC0,OUTP3	;ANY LEFT?
	AOJA	XP,OUTP2	;YES - COUNT AND CARRY ON

OUTP3:	CAML	XP,C		;ANY LEADING SPACES?
	JRST	OUTP4		;NO
	PUSHJ	P,ZERO		;YES - PRINT ONE
	SOJA	C,OUTP3		;AND DECREASE UNTIL FINISHED

OUTP4:	POP	P,AC0		;POP UP DIGIT
	ADDI	AC0,"0"		;ADD ASCII OFFSET
	PUSHJ	P,DEPOT.	;AND PRINT IT
	SOJN	XP,OUTP4	;REPEAT UNTIL FINISHED
RETRNO:	HRLI	1,1-NA(P)	;RESTORE ACCS
	HRRI	1,2
	MOVEM	G,G-1-NA(P)	;RESTORE AC 7
	BLT	1,1+NA
	SUB	P,[NA,,NA]
	POP	P,1
	POPJ	P,		; EXIT FROM ROUTINE

GSAVE:	0			;**V32/01

FRMTAB:	17,,7
	DPMAX+8,,DPMAX
		;ROUNDING TABLE
		;THE SIGN BIT SET PREVENTS OVERFLOW WHEN ADDED
		;  INTO THE BINARY FRACTION
		;ALL NUMBERS BELOW ARE ROUNDED UP ALWAYS

DEFINE TABLE <
ROUND 200000000000,000000000000,0	;0.5E0
ROUND 014631463146,146314631463,2	;0.5E-1
ROUND 001217270243,327024365605,1
ROUND 000101422335,057065176763,7
ROUND 000006433342,353070414545,1
ROUND 000000517426,261070664360,5	;0.5E-5
ROUND 000000041433,336405536661,6
ROUND 000000003265,374515274536,5
ROUND 000000000253,314356106043,0
ROUND 000000000021,056027640466,7
ROUND 000000000001,267633766353,8	;0.5E-10
ROUND 000000000000,053765777027,5
ROUND 000000000000,004313631402,3
ROUND 000000000000,000341134115,0
ROUND 000000000000,000026411156,1
ROUND 000000000000,000002200727,8	;0.5E-15
ROUND 000000000000,000000163225,5
ROUND 000000000000,000000013416,9
ROUND 000000000000,000000001116,2
;ROUND 000000000000,000000000073,0
;ROUND 000000000000,000000000005,9	;0.5E-20
;ROUND 000000000000,000000000000,5	;0.5E-21
>

DEFINE ROUND (A,B,C)<	A+1B0>
RNDHGH:	TABLE

DEFINE ROUND (A,B,C)<	B+1B0+1>
RNDLOW:	TABLE

END
  Qd xL