TITLE TIMES - RETURN DAY,CPU AND KCT
	SUBTTL - J. MARCIN 9/17/70

	ENTRY TIMES
TIMES:	0		 	;RESET ALL!
	SETZM	,1		;ZERO OUT AC FOR NEXT CALL
	CALLI	1,22		;GET DAY TIME IN TICS
	IDIVI	1,^D3600	;DIVIDE TO GET MIN.
	MOVEM	1,@0(16)	;DUMP IN ARG1
	SETZM	,1		;ZERO OUT AC FOR NEXT CALL
	CALLI	1,27		;GET RUN TIME IN MILLISEC
	IDIVI	1,^D1000	;DIVIDE TO GET SEC.
	MOVEM	1,@1(16)	;DUMP INTO ARG2
	SETOM	,1		;GET A WORD OF -1
	HRRI	1,5		;PUT A 5 IN RIGHT HALK FOR KCT TABLE
	CALLI	1,41		;GET KCT FOR THIS JOB
	JFCL			;ERROR!!IMPOSSIBLE
	IDIVI	1,^D60		;DIVIDE TO GET KCT IN SECONDS
	MOVEM	1,@2(16)	;DUMP INTO ARG3
	JRA	16,2(16)	;RETURN TO MAIN
	PRGEND
	TITLE	RT
	SUBTTL	JULY 14, 1970

; RT/RTX --  FORTRAN-CALLABLE RUNNING TIME FUNCTIONS

; FORTRAN FUNCTION REFERENCES:
; RUNNING TIME FOR JOB N IN SECONDS (REAL) = RT(N)
; RUNNING TIME FOR JOB N IN MILLISECONDS (INTEGER) = IRT(N)
; ,WHERE N IS THE NUMBER OF THE JOB TO BE INTERROGATED

; MACRO CALLING SEQUENCES:
; ;FOR RT:
;	JSA	16,RT
;	ARG	N
; ;FOR IRT:
;	JSA	16,IRT
;	ARG	N
; ,WHERE N IS THE ADDRESS OF THE NUMBER OF THE JOB TO BE INTERROGATED

; A JOB NUMBER OF ZERO RETURNS THE TIME FOR THE CURRENT JOB
; TIME RETURNED IS ACCURATE TO WITHIN 1/60TH OF A SECOND

	ENTRY	RT
	ENTRY	IRT
RT:	0	;ENTER HERE FOR RT
	HRRZI	1,	;ZERO AC1
	JRST	.+3	;JUMP TO BEGINNING
IRT:	0	;ENTER HERE FOR IRT
	MOVEI	1,1	;ONE TO AC1
	MOVE	@(16)	;JOB NUMBER TO AC0
	CALLI	27	;PUT RUNNING TIME FOR JOB N IN AC0
	JRST	.+1(1)	;DO WE WANT TIME FLOATED?
	JFFO	.+2	;YES, FIND FIRST ONE
	JRA	16,1(16)	;NO, OR NO RUNNING TIME; RETURN
	LSH	-11(1)	;NORMALIZE FRACTION
	MOVNS	1	;GENERATE SCALE
	FSC	244(1)	;SCALE
	FMP	[.001]	;CONVERT TO SECONDS
	JRA	16,1(16)	;RETURN
	PRGEND
	TITLE	REENT
	SUBTTL	JULY 10, 1970

; REENT --  FORTRAN-CALLABLE SUBROUTINE TO INITIALIZE REENTRY ADDRESS

; FORTRAN CALLING SEQUENCE:
;      CALL REENT (INT)
; ,WHERE INT IS THE REENTRY ADDRESS AS DEFINED IN A PREVIOUS ASSIGNED
; GO TO STATEMENT

; MACRO CALLING SEQUENCE:
;	JSA	16,REENT
;	ARG	INT
; ,WHERE INT IS THE ADDRESS OF THE REENTRY ADDRESS

	ENTRY	REENT
	EXTERNAL	FORSE.
REENT:	0	;ENTER HERE
	MOVE	@(16)	;GET REENTRY ADDRESS
	HRRM	RNTR+1	;DEPOSIT ADDRESS FOR JUMP TO REENTRY POINT
	MOVEI	RNTR	;LOAD ADDRESS OF REENTRY ROUTINE
	MOVEM	124	;PUT ADDRESS IN JOBREN
	JRA	16,1(16)	;RETURN
RNTR:	RESET.	;RESET FORTRAN I/O
	JRST	;JUMP TO REENTRY POINT
	PRGEND
TITLE COMMA ROUTINE
SUBTTL N.S.AVNER
	ENTRY COMMA
	COUNT=1
	QUO=2
	REM=3
	DEST=4
	ARRAY=5
	COM=6
COMMA:	0
	MOVEM 	0,DATA
	MOVE	0,P
	BLT	0,DATA+17
	HRRZI COM,54	;PUT ,INTO REG
	HRRZ ARRAY,0(16)	;GET ADR OF ANS ARRAY
	MOVE DEST,POIN	; PUT POINT. INTO ACC
	SETZ COUNT,	; SET COUNTER TO ZER0
	HRRI 10,020100	; PUT ALL BLANKS IN REG 10
	HRLI 10,201004	; LOAD LEFT HALF
BLANK:	MOVEM 10,@ARRAY	; PUT INTO ANSWER
	CAIL COUNT,2	;SEE IF WHOLE ANSWER BLANKED
	JRST ZERO	;GO TO BEG OF PROG
	ADDI COUNT,1	;INCR BY 1
	ADDI ARRAY,1
	JRST BLANK
ZERO:	SETZ COUNT,

	MOVM QUO,@1(16)	;PUT ABS(AMT) IN QUO
DIVID:	IDIVI QUO,12	;DIV BY 12
	ADDI REM,60	;CONVT REM. TO ASCII
	DPB REM,DEST	;DEPOSIT INTO ANSWER

	LDB 7,POSIT	;LOAD POSIT INTO 7
	ADDI 7,7	;DECRIMENT BYTE POINTER
	CAIGE 7,44	; SEE IF WHOLE WORD DONE
	JRST DEPOS	;IF<44 DEPO. BYTE
	SUBI ARRAY,1	;IF>=44 GET NEW WORD ADR.
	HRRI 7,1	;CHANGE POINTER
DEPOS:	DPB 7,POSIT	; PUT NEW POSITION BACK

	ADDI COUNT,1	; ADD 1 TO COUNT OF CHARS
	CAIN QUO,0	; SEE IF QOUTIENT =0
	JRST OUT	; IF=0 DONE
	CAIE COUNT,3	;SEE IF COUNT=3
	JRST DIVID	; GO TO DIV AGAIN NE TO 3

	DPB COM,DEST	; DEPOSIT COMMA
	LDB 7,POSIT	;GET POINTER VAL
	ADDI 7,7	;DECRIMENT
	DPB 7,POSIT	;PUT BACK
	SETZ COUNT,	; SET COUNTER BACK TO 0
	JRST DIVID	;GO BACK TO DIV.

OUT:	MOVE QUO,@1(16)	; GET VALUE OF AMT
	JUMPGE QUO,RET	;IF VAL>=0 GO TO END
	MOVEI QUO,55	; PUT - IN REG
	DPB QUO,DEST	; PUT - IN ANSWER

RET:	HLRZ COM,2(16)	;GET INFOR
	CAIE	COM,320000;	SEE IF = ARG 00
	JRST RESTR	;NOT SO  SO RETURN
	HRRZ	QUO,@2(16)	;GET THE NUMBER OF CHARS.
	HRRZ	ARRAY,0(16)	;GET ADR OF ARRAY
	IDIVI 	QUO,5	;DIVIDE BY 5
	CAIN	REM,0	;SEE IF REM NE 0
	JRST RESTR
	IMULI	REM,7	;MULTIPY BY 7
	ADDI 	REM,1	; ADD 1
	MOVNS	REM,REM	;MAKE NEGATIVE
	HRRZ	QUO,@2(16)	;GET NO OF CHARS AGAIN
	CAILE	QUO,^D10	;<=10?
	JRST ROTA	;>10 SO DON'T MODIFY ADRES
	CAIG	QUO,5	;
	JRST	LT5	;IF LT. 5
	ADDI	ARRAY,1	;>5,SO ADD 1 TO ADR
	JRST	ROTA
LT5:	ADDI	ARRAY,2	;<5 SO ADD 2 TO ADRS
ROTA:	MOVE	COUNT,@ARRAY	;GET THE WORD
	ROT	COUNT,0(REM)	;ROTATE BY THE CONTENTS OF REM
	MOVEM	COUNT,@ARRAY	;PUT BACK
RESTR:	MOVE	 0,Q
	BLT	0,17
	MOVE	0,DATA
	JRA 16,2(16)	; GO BACK TO MAINLINE
POIN:	POINT 7,@ARRAY,34
POSIT:	POINT 6,DEST,5
P:	XWD 1,DATA+1
Q:	XWD DATA+1,1
DATA:	BLOCK 20
	PRGEND
        TITLE ONECHR
        ENTRY ONECHR
ONECHR: 0
        MOVE 1,@0(16)
        TTCALL 15,1
        JRA 16,1(16)
        PRGEND
	TITLE	INT  V.005  
SUBTTL 17-MAY-67

;FLOATING POINT TRUNCATION FUNCTION - INTEGER RESULT
;THE ROUTINE TRUNCATES THE FRACTIONAL PART OF A FLOATING
;POINT NUMBER AND RETURNS THE ANSWER AS AN INTEGER. THE
;ALGORITHM USES AN ASHC TO SHIFT THE NUMBER AND LEAVES 
;THE RESULT AS A REMAINDER IN B

	ENTRY	INT

	A=	0
	B=	1
	C=	2
	Q=	16

INT:	0			;ENTRY TO INT ROUTINE
	MOVEM	C, XINTC	;SAVE AC C
	MOVEM	B, XINTB	;SAVE AC B
	SETZM	B		;CLEAR INITIAL ANSWER TO ZERO
	MOVE	A, @(Q)		;PICK UP THE ARGUMENT
	MOVEM	A, XINT2	;SAVE IT
	MOVMS	A		;GET THE MAGNITUDE OF THE ARG
	CAML	A,XLOW		;IS NO. LESS THAN 1.0 ?
	CAML	A,XHIGH		;IS THE NO.  .G. THE HIGHEST POSSIBLE INTEGER
	JRST	MOVEB		;YES,YES  RETURN ZERO ANSWER
	MOVE	C, A		;GET COPY OF NO. IN C
	LSH	C, -33		;GET EXPONENT IN RIGHT MOST POSITION
	SUBI	C, 276		;OBTAIN SHIFTING FACTOR
	TLZ	A, 777000	;REMOVE EXPONENT FOR SHIFTING
	ASHC	A, (C)		;SHIFT FRACTION RIGHT TO OBTAIN INTEGER
MOVEB:	MOVE	A, B		;GET RESULTS
	SKIPGE	XINT2		;WAS ARGUMENT NEGATIVE?
	MOVNS	A		;YES, NEGATE THE RESULT
	MOVE	B, XINTB	;RESTORE AC B
	MOVE	C, XINTC	;RESTORE AC C
	JRA	Q, 1(Q)		;EXIT

XLOW:	201400000000
XHIGH:	243400000000
XINT2:	0
XINTB:	0
XINTC:	0

	PRGEND
	TITLE	.INT.  V.005  
SUBTTL 17-MAY-67

;FLOATING POINT TRUNCATION FUNCTION - INTEGER RESULT
;THE ROUTINE TRUNCATES THE FRACTIONAL PART OF A FLOATING
;POINT NUMBER AND RETURNS THE ANSWER AS AN INTEGER. THE
;ALGORITHM USES AN ASHC TO SHIFT THE NUMBER AND LEAVES 
;THE RESULT AS A REMAINDER IN B

	ENTRY	.INT.

	A=	0
	B=	1
	C=	2
	Q=	16

.INT.:	0			;ENTRY TO INT ROUTINE
	MOVEM	C, XINTC	;SAVE AC C
	MOVEM	B, XINTB	;SAVE AC B
	SETZM	B		;CLEAR INITIAL ANSWER TO ZERO
	MOVE	A, @(Q)		;PICK UP THE ARGUMENT
	MOVEM	A, XINT2	;SAVE IT
	MOVMS	A		;GET THE MAGNITUDE OF THE ARG
	CAML	A,XLOW		;IS NO. LESS THAN 1.0 ?
	CAML	A,XHIGH		;IS THE NO.  .G. THE HIGHEST POSSIBLE INTEGER
	JRST	MOVEB		;YES,YES  RETURN ZERO ANSWER
	MOVE	C, A		;GET COPY OF NO. IN C
	LSH	C, -33		;GET EXPONENT IN RIGHT MOST POSITION
	SUBI	C, 276		;OBTAIN SHIFTING FACTOR
	TLZ	A, 777000	;REMOVE EXPONENT FOR SHIFTING
	ASHC	A, (C)		;SHIFT FRACTION RIGHT TO OBTAIN INTEGER
MOVEB:	MOVE	A, B		;GET RESULTS
	SKIPGE	XINT2		;WAS ARGUMENT NEGATIVE?
	MOVNS	A		;YES, NEGATE THE RESULT
	MOVE	B, XINTB	;RESTORE AC B
	MOVE	C, XINTC	;RESTORE AC C
	JRA	Q, 1(Q)		;EXIT

XLOW:	201400000000
XHIGH:	243400000000
XINT2:	0
XINTB:	0
XINTC:	0

	PRGEND
TITLE	FLOAT  V.32(415)	INTEGER TO REAL CONVERSION
SUBTTL	23-MAY-72	ED YOURDON/KK/VAA/TWE/DMN
;***COPYRIGHT 1969,1970,1971,1972 DIGITAL EQUIPMENT CORP., MAYNARD, MASS.***

;36 BIT FLOAT FUNCTION
;CONVERTS A SIGNED FIXED POINT INTEGER TO FLOATING POINT
;BY BREAKING THE INTEGER INTO HIGH ORDER AND LOW ORDER
;FRACTIONS, CALCULATING AN EXPONENT, THEN ADDING THE TWO
;TOGETHER. SINGLE CONVERSION.

;THE ROUTINE IS CALLED AS FOLLOWS:
;	JSA	Q, FLOAT
;	EXP	ARG
;THE ANSWER IS RETURNED IN ACCUMULATOR A

	SEARCH	DEF40
	ENTRY	FLOAT

	SIXBIT/FLOAT/
FLOAT:	0			;ENTRY TO FLOAT ROUTINE
IFE KI10,<
	MOVM	A, @(Q)		;PICK UP MAGNITUDE OF THE ARGUMENT
	HLRZ	B,A
	FSC	B,255		;FLOAT LEFT HALF
	HRLI	A,0
	FSC	A,233		;FLOAT RIGHT HALF
	FADR	A, B		;NORMALIZE AND ADD
	SKIPGE	@(Q)	
	MOVN	A,A		;SET NEGATIVE SIGN
	JRA	Q, 1(Q) >	;EXIT
IFN KI10,<
	HRRZ	A,Q		;GET ADDRESS OF "JUMP ADR"
	HRLI	A,(FLTR 0,@)	;CONSTRUCT "FLTR 0,@.+1"
	MOVEM	A,-1(Q)		; AND STORE OVER THE JSA
	MOVSI	A,(JUMP)	;MAKE SURE THERE IS A JUMP
	IORM	A,(Q)		;SINCE LIBRARY USES EXP ARG
	JRA	Q,-1(Q) >	;AND RETURN TO THE NEW FLTR INSTRUCTION

	PRGEND
TITLE	IFIX  V.032(415)	REAL TO INTEGER CONVERSION
SUBTTL	23-MAY-72		ED YOURDON/KK/TWE/DMN

;36 BIT FIX FUNCTION
;AN INTEGER RESULT IS OBTAINED BY SEPARATING FRACTION AND
;EXPONENT. THE FRACTION IS SHIFTED N PLACES RIGHT, WHERE
;N = 43 - (EXPONENT-200) (OCTAL)

;THE CALLING SEQUENCE FOR THE ROUTINE IS AS FOLLOWS:
;	JSA	Q, IFIX
;	EXP	ARG
;OR
;	JSA	Q,INT
;	EXP	ARG

;THE ANSWER IS RETURNED IN ACCUMULATOR A

	SEARCH	DEF40
	ENTRY	IFIX
;	ENTRY	IFIX,INT

;	SIXBIT/INT/
;INT:	0			;ENTRY TO INT ROUTINE.
;	JRST	IFIX+1		;GO TO MAIN ROUTINE.

	SIXBIT/IFIX/
IFIX:	0			;ENTRY TO IFIX ROUTINE
IFE KI10,<
	MOVM	A, @(Q)		;PICK UP THE ARGUMENT
	MULI	A, 400		;SEPARATE FRACTION AND EXPONENT
	EXCH	A, B		;PUT PARTIAL RESULTS IN A
	ASH	A, -243(B)	;USENENT AS INDEX REGISTER
	SKIPGE	@(Q)		;SET THE
	MOVNS	A,A		;CORRECT SIGN.
	JRA	Q, 1(Q)		;EXIT
>	;END OF IFE KI10

IFN KI10,<
	HRRZ	A,Q		;PATCH THE JSA WITH "FIX 0,@.+1"
	HRLI	A,(FIX 0,@)
	MOVEM	A,-1(Q)
	MOVSI	A,(JUMP)	;MAKE SURE THERE IS A JUMP
	IORM	A,(Q)		;SINCE LIBRARY USES EXP ARG
	JRA	Q,-1(Q)		;AND RETURN TO THE NEW "FIX" INSTRUCTION
>			;END OF IFN KI10

	PRGEND
TITLE	ADJ.  V.032(323)	VARIABLE DIMENSION SUBSCRIPT CALCULATOR
SUBTTL	24-OCT-1971	TOM OSTEN/TWE

;ADJ. IS A PROGRAM CALLED AT RUN-TIME BY A FORTRAN PROGRAM
;TO CALCULATE THE MULTIPLIERS AND OFFSET FOR SUBSCRIPT CALCULATIONS
;FOR DIMENSIONS DECLARED AS SUBROUTINE ARGUMENTS. THE COMPILER
;GENERATES THE FOLLOWING SEQUENCE:
;	JSA	16, ADJ.
;	EXP	N		;DIMENSIONALITY OF ARRAY
;	ARG	X, TEMP+N+1	;ARG IS A NO-OP, X IS THE TYPE 
				;OF THE ARGUMENT,TEMP IS A PNTR
				;TYPE,TEMP+N+1 POINTS TO END OF
				;MULTIPLIER TABLE
;	EXP	U1		;ADDRESS OF NUMBER WHICH IS THE 
;				;UPPER BOUND FOR FIRST SUBSCRIPT
;	EXP	L1		;ADDRESS OF NUMBER WHICH IS THE
;				;LOWER BOUND FOR FIRST SUBSCRIPT
;	.
;	.
;	.
;	EXP	LN		;LAST LOWER BOUND ADDRESS
;THE TEMP BLOCK IS CONSTRUCTED AS FOLLOWS:

;TEMP:	SIZE OF ARRAY (EQUAL TO MULTIPLIER N)
;	OFFSET
;	MULTIPLIER N-1
;	.
;	.
;	.
;	MULTIPLIER 1
;	MULTIPLIER 0

;THE I-TH MULTIPLIER, P(I), IS DESCRIBED BY:
;	P(0) = 1
;	P(I) = P(I-1) * (U(I) - L(I) + 1)

;THE OFFSET IS DESCRIBED BY
;	OFFSET = SUM FROM 1 TO N OF P(I-1)*L(I)

	ENTRY	ADJ.
	SEARCH	DEF40

ADJ.:	0			;ENTRY TO ADJ. ROUTINE
	MOVEM	2,SAV2		;SAVE AC 2
	LDB	C,[POINT 3,1(Q),11]	;GET HI 3 BITS OF ARG TYPE
	SUBI	C,3		;0 RESULT MEANS D.P. OR COMPLEX
	MOVEM	C,ACFLD		;SAVE FOR FUTURE USE
	MOVNI	C, @(Q)		;GET MINUS COUNT OF DIMENSIONS
	MOVEI	B, @1(Q)	;GET TOP ADDRESS OF TEMP BLOCK
	ADDI	B, -1(C)	;SET B BACK TO BEGINNING OF TEMP BLOCK
	HRL	B, C		;AOBJN WORD IS (-CNT)ADDR
	MOVEI	A, 1		;INITIALIZE P(0) = 1
	SETZM	OFFSET		;INITIALIZE OFFSET=0

ADJ.1:	MOVEM	A, (B)		;STORE P(N)
	ADDI	Q, 2		;SET FOR NEXT PAIR OF DIMENSIONS
	MOVE	C, A		;COPY P(N)
	IMUL	C, @1(Q)	;P(N-1)*L(N)
	ADDM	C,OFFSET	;ADD INTO OFFSET
	MOVE	C, @(Q)		;GET U(N)
	SUB	C, @1(Q)	;U(N) - L(N)
	IMULI	A, 1(C)		;P(N-1)*(U(N) -L(N) +1)
	AOBJN	B, ADJ.1	;N=N+1, GO AROUND LOOP

	MOVE	C,OFFSET	;GET OFFSET BACK
	SKIPN	ACFLD		;WAS TYPE D.P. OR COMPLEX?
	ASH	C,1		;YES, MULTIPLY OFFSET BY 2 FOR
				;COMPLEX OR DOUBLE PRECISION ARG.
	MOVEM	C, (B)		;OFFSET TO NEXT TO LAST ENTRY
	MOVEM	A, 1(B)		;SIZE TO LAST ENTRY
	MOVE	2,SAV2		;RESTORE AC 2
	JRA	Q, 2(Q)		;RETURN

OFFSET:	BLOCK	1
ACFLD:	BLOCK	1	;HOLD 0 IF DOUBLE PRECISION OR COMPLEX
SAV2:	BLOCK	1	;TEMP STORAGE FOR AC 2

	PRGEND
TITLE	ILL  V.032(323)      ZERO INPUT WORD ON ILLEG. CHARACTERS
SUBTTL	24-OCT-1971	/DMN/TWE

;WHEN THE FLAG ILLEG. IS SET (BY CALLING ILL), 
;FLOATING POINT INPUT WORDS WILL BE CLEARED IF
;ANY ILLEGAL CHARACTERS ARE SCANNED FOR THAT WORD.
;THE ILLEG. FLAG IS CLEARED BY FORSE. AT THE END
;OF EACH FORMAT STATEMENT.

;THE CALLING SEQUENCE IS JSA Q,ILL

;THE ROUTINE 'LEGAL' ALLOWS ONE TO CLEAR THE
;ILLEG. FLAG SO THAT ILLEGAL CHARACTERS WILL
;RESULT IN THE NORMAL ILLEGAL CHARACTER RETURN.

;THE CALLING SEQUENCE IS JSA Q,LEGAL

ENTRY ILL,LEGAL
EXTERN ILLEG.
SEARCH DEF40

	SIXBIT	/ILL/
ILL:	0
	SETOM ILLEG.	;SET ILL CH FLAG
	JRA Q,(Q)

	SIXBIT	/LEGAL/
LEGAL:	0
	SETZM ILLEG.	;CLEAR ILL CH FLAG
	JRA Q,(Q)

	PRGEND
TITLE	ABS  V.032(323)	S.P. ABSOLUTE VALUE FUNCTION
SUBTTL	24-OCT-1971	ED YOURDON/KK/TWE

;SINGLE PRECISION ABSOLUTE VALUE FUNCTION
;ABS AND IABS RETURN THE ABSOLUTE VALUE OF A SINGLE PRECISION
;ARGUMENT.

;THE CALLING SEQUENCE FOR THE ROUTINES IS
;	JSA	Q, ABS
;	EXP	ARG
;THE ANSWER IS RETURNED IN ACCUMULATOR A

	ENTRY	ABS, IABS
	SEARCH	DEF40


	SIXBIT/ABS/
ABS:	0			;ENTRY TO ABS ROUTINE
	MOVM	A,@(Q)		;GET /ARG/.
	JRA	Q,1(Q)		;EXIT.

	SIXBIT/IABS/
IABS:	0			;ENTRY TO IABS ROUTINE.
	MOVM	A,@(Q)		;GET /ARG/.
	JFCL	1,[HRLOI A,377777 ;/-INFIN/ IS SET TO +INFIN,
		JRA Q,1(Q)]	;AND AN ERROR MESSAGE IS RETURNED.
	JRA	Q,1(Q)		;EXIT.

	PRGEND
TITLE	RESET V.032(323)	RESETS ALL I/O DEVICES
SUBTTL	24-OCT-1971	DICK GRUEN/TWE

	SEARCH	DEF40
	ENTRY	RESET

	SIXBIT /RESET/
RESET:	0
	RESET.
	JRA	Q,(Q)

	PRGEND
TITLE	DIM  V.032(323)	S.P. POSITIVE DIFFERENCE FUNCTION
SUBTTL	24-OCT-1971	ED YOURDON/TWE

;SINGLE PRECISION DIM FUNCTION
;DIM(A,B) IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, DIM
;	EXP	A
;	EXP	B
;DIM RETURNS THE POSITIVE DIFFERENCE OF A AND B:
;IF (A-B)>0, THEN DIM(A,B) = A-B
;IF (A-B) .LE. 0, THEN DIM(A,B) = 0

	ENTRY	DIM
	SEARCH	DEF40


	SIXBIT/DIM/
DIM:	0			;ENTRY TO DIM ROUTINE
	MOVE	A, @(Q)		;PICK UP FIRST ARGUMENT
	CAMG	A,@1(Q)		;IF A > B, GO TO SUBTRACT.
	TDZA	A,A		;O'E, ZERO A AND GO TO EXIT.
	FSBR	A,@1(Q)		;CALC A - B.
	JRA	Q,2(Q)		;EXIT.

	PRGEND
TITLE	IDIM  V.032(323)	INTEGER POSITIVE DIFFERENCE FUNCTION
SUBTTL	24-OCT-1971	ED YOURDON/KK/TWE

;SINGLE PRECISION INTEGER DIM FUNCTION
;IDIM(A,B) IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, IDIM
;	EXP	A
;	EXP	B
;IDIM RETURNS THE POSITIVE DIFFERENCE OF A AND B:
;IF (A-B) .LE. 0, THEN DIM(A,B)=0
;IF(A-B) .G. 0 , THEN DIM(A,B)=(A-B)

	ENTRY	IDIM
	SEARCH	DEF40

	SIXBIT/IDIM/
IDIM:	0			;ENTRY TO IDIM ROUTINE
	MOVE	A, @(Q)		;PICK UP FIRST ARGUMENT
	CAMG	A,@1(Q)		;IF A <= B,
	MOVE	A,@1(Q)		;ANS WILL = 0.
	SUB	A,@1(Q)		;IF A > B,
	JFCL	1,[HRLOI A,377777 ;ANS = A - B,
		JRA Q,2(Q)]	;+ OVERFLOW MAY OCCUR.
	JRA	Q, 2(Q)		;EXIT

	PRGEND
TITLE	SIGN.  V.032(323)	S.P. AND INTEGER XFER OF SIGN FUNCTION
SUBTTL	24-OCT-1971 	ED YOURDON/KK/TWE

;SIGN(A,B) AND ISIGN(A,B) ARE CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, SIGN
;	EXP	A
;	EXP	B
;IF B .GE. 0, THEN ABSF(A) IS RETURNED IN ACCUMULATOR A
;IF B .L. 0, THEN -ABSF(A) IS RETURNED IN ACCUMULATOR A

	ENTRY	SIGN, ISIGN
	SEARCH	DEF40

	SIXBIT/SIGN/
SIGN:	0			;ENTRY TO SIGN
	MOVM	A, @(Q)		;GET MAGNITUDE OF FIRST ARGUMENT
	SKIPGE	@1(Q)		;IS SECOND ARGUMENT POSITIVE?
	MOVNS	A		;NO, NEGATE RESULT
	JRA	Q, 2(Q)		;EXIT

	SIXBIT/ISIGN/
ISIGN:	0			;ENTRY TO ISIGN
	MOVE	A,@(Q)		;FIRST ARG TO A.
	XOR	A,@1(Q)		;IF FIRST AND SECOND HAVE
	JUMPL	A,.+3		;DIFFERENT SIGNS, GO TO .+3.
	MOVE	A,@(Q)		;O'E, THE ANSWER = FIRST ARG.
	JRA	Q,2(Q)		;EXIT.
	MOVN	A,@(Q)		;ANSWER=-FIRST ARG.
	JFCL	1,.+2		;IF OVERFLOW, GO TO .+2.
	JRA	Q,2(Q)		;O'E, EXIT.
	HRLOI	A,377777	;ANSWER IS SET TO +INFINITY.
	JRA	Q,2(Q)		;EXIT.

	PRGEND
TITLE	AINT	V.032(323)	FLOATING POINT TRUNCATION FUNCTION
SUBTTL	24-OCT-1971	ED YOURDON /KK/TWE

;FLOATING POINT TRUNCATION FUNCTION.
;TRUNCATES FRACTIONAL PART OF FLOATING POINT NUMBER
;AND RETURNS ANSWER AS A FLOATING POINT NUMBER.
;THE ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q,AINT
;	EXP	ARG

;THE ANSWER IS RETURNED IN AC 0.

	SEARCH	DEF40
	ENTRY	AINT

	SIXBIT/AINT/
AINT:	0			;ENTRY TO AINT ROUTINE.
	MOVE	B,@(Q)		;ARG. TO AC 1.
	MOVM	A,B		;/ARG./ TO AC 0.
	CAML	A,MOD1		;IS /ARG/<2**26?
	JRST	AINT1		;NO, NO FRACTION BITS, EXIT.
	FAD	A,MOD1		;YES, REMOVE
	FSB	A,MOD1		;THE FRACTION BITS.
AINT1:	SKIPGE	B		;SET THE
	MOVNS	A		;CORRECT SIGN AND
	JRA	Q,1(Q)	;EXIT.

MOD1:	233400000000		;2**26

	PRGEND
TITLE	AMOD	V.32(323)	S.P. MOD FUNCTION
SUBTTL	24-OCT-71	ED YOURDON/KK/DMN/TWE

;FLOATING POINT SINGLE PRECISION MOD FUNCTION
;MODF(A,B) = A-[A/B]*B, WHERE [A/B] IS THE GREATEST INTEGER
;IN THE MAGNITUDE OF A/B.  THE TERM A/B MUST BE LESS THAN 
;2**26 IN MAGNITUDE.

;THE ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q,AMOD
;	EXP	A
;	EXP	B

	ENTRY	AMOD
	SEARCH	DEF40

	EXTERN	OVPC.,TYPER.
	SIXBIT	/AMOD/
AMOD:	0			;ENTRY TO AMOD ROUTINE.
	MOVEM	C,SAVEC		;SAVE AC 2.
	MOVE	A,@(Q)		;PICK UP FIRST ARG.
	MOVE	B,@1(Q)		;PICK UP SECOND ARG.
	MOVM	C,B		;GET ABSF(B) IN C.
	FDVM	A,B		;CALCULATE A/B.
	JFCL	DETRMN		;IF OVER/UNDER FLOW, GO TO DETRMN VIA OVTRAP.
	MOVMS	B		;CALC. ABSF(A/B).
	CAML	B,MOD1		;IF A/B GE 2**26, 
	JRST	TOOLRG		;GO TO ERROR RETURN.
	FAD	B,MOD1		;OTHERWISE, TRUNCATE TO
	FSB	B,MOD1		;INTEGER.
	FMP	C,B		;C=B**ABSF([A/B])
	SKIPGE	A		;RESTORE
	MOVNS	C		;THE SIGN.
	FSB	A,C		;CALC. A-[A/B]*B.
OUT:	MOVE	C,SAVEC		;RESTORE AC 2.
	JRA	Q,2(Q)		;EXIT.
DETRMN:	MOVE	B,OVPC.		;PICK UP FLAGS.
	TLNE	B,000100	;IF OVERFLOW, GO TO TOOLRG.
	JRST	OUT		;UNDERFLOW, A IS RESULT.
TOOLRG:	MOVEI	A,3		;SET UP AC 0 FOR TYPER.
	PUSHJ	P,TYPER.	;GO TO TYPER. FOR ERROR MESSAGE.
	SETZ	A,		;ZERO A.
	JRST	OUT		;GO TO EXIT.
SAVEC:	0
MOD1:	233400000000		;2**26.

	PRGEND
TITLE	MOD	V.032(323)	INTEGER MOD FUNCTION
SUBTTL	24-OCT-1971	ED YOURDON/KK

;INTEGER MOD FUNCTION
;MOD(A,B) = A-[A/B]*B, WHERE [A/B] IS THE GREATEST (IN
;MAGNITUDE) INTEGER IN A/B.  THAT IS, THE MOD FUNCTION 
;RETURNS THE REMAINDER OF THE QUOTIENT OF A AND B.  HENCE,
;9 MOD 2 IS 1, AND SO FORTH.

;THE CALLING SEQUENCE FOR THE ROUTINE IS:
;	JSA	Q,MOD
;	ARG	0,A
;	ARG	0,B
;WHERE ARG MAY BE ANY OPCODE, THE 0 IS THE AC FIELD AND USUALLY
;DESIGNATES THE TYPE OF ARGUMENT.  A AND B ARE THE ADDRESSES
;OF THE TWO ARGUMENTS TO THE PROGRAM.

	SEARCH	DEF40
	ENTRY	MOD

	SIXBIT/MOD/
MOD:	0			;ENTRY TO MOD ROUTINE
	MOVE	A,@(Q)		;FIRST ARG TO AC 0.
	IDIV	A,@1(Q)		;DIVIDE, REMAINDER IN AC 1.
	MOVE	A,A+1		;PUT THE ANSWER IN AC 0.
	JRA	Q,2(Q)	;EXIT

	PRGEND
TITLE	DATE	V.32(433)	TODAY'S DATE	FORTRAN IV
SUBTTL	1-JUNE-72	/KK/DMN


;THIS SUBROUTINE PUTS TODAY'S DATE INTO A
;DIMENSIONED TWO-WORD ARRAY.

;THE DATE WILL BE IN THE FORM:
;	17-Aug-66

;THE ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	16,DATE
;	ARG	A

;"DATE" OBTAINS THE DATE FROM THE MONITOR IN THE FORM:
;	( (YEAR-1964)*12 + (MONTH-1) )*31 + (DAY-1)

	ENTRY	DATE

	SIXBIT/DATE/
DATE:	0			;ENTRY TO DATE ROUTINE.
	MOVEI	1,@(16)		;GET ADDRESS OF 2 WORD ARRAY
	MOVEM	2,0(1)		;SAVE THE CONTENTS OF AC 2.
	MOVEM	3,1(1)		;SAVE THE CONTENTS OF AC 3.
	CALLI	1,14		;GET THE DATE FROM THE MONITOR.
	IDIVI	1,^D31		;DIV. BY 31 TO OBTAIN THE DAY-1.
	ADDI	2,1		;TO OBTAIN THE DAY.
	IDIVI	2,^D10		;CONVERT INTO TWO DEC. DIGITS.
	SKIPN	2		;IS THE DAY < 10?
	MOVNI	2,20		;YES, OUTPUT BLANK.
	MOVEI	0,"0"(2)	;GET FIRST DIGIT
	LSH	0,7		;MAKE SPACE
	ADDI	0,"0"(3)	;ADD IN 2ND DIGIT
	IDIVI	1,^D12		;TO OBTAIN THE MONTH
	EXCH	1,2		;SAVE YEAR IN 2
	MOVE	1,TABLE(1)	;GET MONTH IN 1
	LSHC	0,3*7		;LEFT JUSTIFY 0 & 1
	LSH	0,1		;0 = ASCII /DD-MO/
				;1 = ASCII /N-/
	MOVEI	2,^D64(2)	;GET THE YEAR
	IDIVI	2,^D10		;CONVERT INTO TWO DEC. DIGITS
	ADDI	2,"0"		;MAKE ASCII
	ADDI	3,"0"
	LSH	2,2*7+1		;SHIFT TO CHAR 3
	LSH	3,7+1		;SHIFT TO CHAR 4
	ADD	3,2		;ADD IN TO 3
	ADD	3,1		;SO LOW WORD IS IN 3
	MOVE	2,0		;PUT HIGH ORDER RESULT IN 2
	MOVEI	1,@(16)		;USER ADDRESS
	EXCH	2,0(1)		;RESTORE 2
	EXCH	3,1(1)		;AND 3 WHILE STORING RESULT
	JRA	16,1(16)	;RETURN.

;SUB1 CONVERTS THE DAY AND THE YEAR INTO ASCII CHARS, AND
;DEPOSITS THEM IN THE TWO WORD ARRAY.

SUB1:	ADDI	2,60		;CONVERT FIRST DIGIT TO ASCII
	IDPB	2,0		;DEPOSIT FIRST DIGIT
	ADDI	3,60		;CONVERT SECOND DIGIT TO ASCII
TABLE:	ASCII	/-Jan-/
	ASCII	/-Feb-/
	ASCII	/-Mar-/
	ASCII	/-Apr-/
	ASCII	/-May-/
	ASCII	/-Jun-/
	ASCII	/-Jul-/
	ASCII	/-Aug-/
	ASCII	/-Sep-/
	ASCII	/-Oct-/
	ASCII	/-Nov-/
	ASCII	/-Dec-/

	PRGEND
TITLE	TIME	V.022	TIME OF DAY FORTRAN IV
SUBTTL	18-DECEMBER-1969	/KK

;FROM V.017.5
;THIS SUBROUTINE PUTS THE TIME OF DAY INTO TWO WORDS.
;
;THE WORDS CONTAIN THE HOUR, THE MINUTE, THE SECOND, AND THE
;TENTH OF A SECOND.

;THE FIRST WORD IS OF THE FORM:
;	02:15 (FOR A.M. TIME)
;	14:15 (FOR P.M. TIME)

;THE SECOND WORD IS OF THE FORM:
;	37.4
;
;THE ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	16,TIME
;	ARG	A
;	ARG	B
;SINCE THE OLD VERSION OF TIME HAD ONLY ONE ARGUMENT,
;TIME CHECKS TO BE SURE A SECOND ARGUMENT IS EXPECTED
;BEFORE RETURNING IT.  THE OPCODE OF THE SECOND ARGUMENT
;MUST BE 320.

;TIME OBTAINS THE TIME FROM THE MONITOR IN THE FORM:
;	TIME=THE NUMBER OF MILLISECONDS SINCE MIDNIGHT.

	ENTRY TIME

	SIXBIT/TIME/
TIME:	0			;ENTRY TO ROUTINE TIME
	MOVEM	2,SAVE2		;SAVE AC 2
	MOVEM	3,SAVE3		;SAVE AC 3
	CALLI	1,23		;GET TIME IN MILLISECS FROM THE MONITOR.
	IDIVI	1,^D60000	;TOTAL MINS. IN 1, LEFTOVER MSECS. IN 2.
	MOVEM	2,TEMP1		;SAVE THE LEFTOVER MSECONDS.
	IDIVI	1,^D60		;HOURS IN 1, MINUTES IN 2.
	MOVEM	2,TEMP2		;SAVE THE MINUTES.
	HRLZI	0,440736	;SET UP POINTER.
	JSP	3,SUB1		;GO TO SUBR. TO SET UP HR. IN ASCII.
	MOVEI	1,":"		;SET UP ":".
	IDPB	1,0		;DEPOSIT ":" IN THE WORD.
	MOVE	1,TEMP2		;PICK UP THE MINUTES.
	JSP	3,SUB1		;GO TO SUBR. TO SET UP MIN. IN ASCII.
	MOVE	3,1(16)		;CHECK TO SEE
	TLC	3,320000	;IF A SECOND
	TLNE	3,777000	;ARG. IS EXPECTED.
	JRST	OUT1		;IF NOT, GO TO OUT1.
	HRLZI	0,440736	;SET UP THE NEW
	ADDI	0,1		;POINTER.
	MOVEI	1," "		;PUT IN A BLANK AS THE FIRST
	IDPB	1,0		;CHARACTER IN THE 2ND WORD.
	MOVE	1,TEMP1		;PICK UP THE MSECONDS.
	IDIVI	1,^D1000	;SECONDS IN 1, LEFTOVER MSECS. IN 2.
	MOVEM	2,TEMP1		;SAVE THE MSECS.
	JSP	3,SUB1		;GO TO SUBR. TO SET UP THE SECS. IN ASCII.
	MOVEI	1,"."		;SET UP "."
	IDPB	1,0		;IN THE WORD.
	MOVE	2,TEMP1		;PICK UP THE MSECS.
	IDIVI	2,^D100		;GET THE TENTH OF A SECOND.
	ADDI	2,60		;MAKE IT ASCII.
	IDPB	2,0		;PUT IT IN THE SECOND WORD.
	MOVE	2,SAVE2		;RESTORE AC 2.
	MOVE	3,SAVE3		;RESTORE AC 3.
	JRA	16,2(16)	;RETURN.
OUT1:	MOVE	2,SAVE2		;RESTORE AC 2.
	MOVE	3,SAVE3		;RESTORE AC 3.
	JRA	16,1(16)	;RETURN.
SUB1:	IDIVI	1,^D10		;SUBROUTINE ENTRY POINT.
	ADDI	1,60		;MAKE THE FIRST DIGIT ASCII.
	IDPB	1,0		;DEPOSIT IT IN THE WORD.
	ADDI	2,60		;MAKE THE 2ND DIGIT ASCII.
	IDPB	2,0		;DEPOSIT IT IN THE WORD.
	JRST	(3)		;RETURN TO MAIN SEQUENCE.
SAVE2:	0
SAVE3:	0
TEMP1:	0
TEMP2:	0
	PRGEND
TITLE	SLITE  V.032(323)	SENSE LITE SETTING AND TESTING FUNCTION
SUBTTL	24-OCT-1971	/TWE

;SENSE LIGHT SETTING AND TESTING PROGRAM
;THIS PROGRAM CAN BE ENTERED AT TWO PLACES. THE SENSE LIGHT
;TESTING PROGRAM IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, SLITET
;	EXP	I
;	EXP	J
;I IS THE ADDRESS OF AN INTEGER ARGUMENT, AND J IS THE ADDRESS
;OF THE ANSWER. IF SENSE LIGHT I IS ON, THE ANSWER IS ONE, AND
;IF IT IS OFF, THE ANSWER IS 2.

;THE SENSE LIGHT SETTING PROGRAM IS CALLED IN THE FOLLOWING
;MANNER:
;	JSA	Q, SLITE
;	EXP	I
;I IS THE ADDRESS OF AN INTEGER ARGUMENT WHOSE VALUE IS
;BETWEEN 0 AND 36. IF I=0, ALL SENSE LIGHTS ARE TURNED OFF.
;OTHERWISE, SENSE LIGHT I IS TURNED ON.

	ENTRY	SLITE, SLITET
	SEARCH	DEF40


	SIXBIT /SLITE/
SLITE:	0			;ENTRY TO SLITE PROGRAM
	MOVN	B, @(Q)		;GET ARGUMENT
	JUMPE	B, SLITE2	;IS IT ZERO?
	MOVSI	A, 400000	;NO, PUT A ONE IN BIT 0
	ROT	A, 1(B)		;ROTATE IT INTO POSITION
	MOVE	B, LITES	;GET THE SENSE LIGHTS
	TDO	B, A		;TURN ON PROPER LIGHT
SLITE2:	MOVEM	B, LITES	;SAVE NEW SENSE LIGHTS
	JRA	Q, 1(Q)		;EXIT

	SIXBIT /SLITET/
SLITET:	0			;ENTRY TO SENSE TESTING PROGRAM
	MOVN	B, @(Q)		;PICK UP ARGUMENT
	MOVSI	A, 400000	;PUT A ONE IN BIT 0
	ROT	A, 1(B)		;ROTATE IT INTO POSITION
	MOVEI	B, 1		;SET ANSWER TO ONE FOR NOW
	MOVEM	B, @1(Q)	;...
	MOVE	B, LITES	;PICK UP SENSE LIGHTS
	TDZN	B,A		;IS THE PROPER LIGHT ON?
	AOS	@1(Q)		;NO, CHANGE ANSWER TO 2
	MOVEM	B,LITES		;RESTORE WITH TESTED LIGHT OFF
	JRA	Q, 2(Q)		;EXIT

LITES:	0

	PRGEND
TITLE	SSWTCH  V.032(323)	DATA SWITCH TESTING FUNCTION
SUBTTL	24-OCT-1971	/TWE

; DATA SWITCH TESTING PROGRAM
;THIS PROGRAM IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q, SSWTCH
;	EXP	I
;	EXP	J
;I IS THE ADDRESS OF AN INTEGER ARGUMENT AND J IS THE ADDRESS
; OF THE ANSWER . IF DATA SWITCH I IS UP,THE ANSWER IS 2 , AND
; IF IT IS DOWN, THE ANSWER IS 1.

	ENTRY	SSWTCH
	SEARCH	DEF40

	SIXBIT /SSWTCH/
SSWTCH:	0			;ENTRY TO SSWTCH PROGRAM
	MOVN	B, @(Q)		;PICK UP ARGUMENT
	MOVSI	A, 400000	;PUT A ONE IN BIT 0
	ROT	A,(B)		; ROTATE BIT INTO POSITION
	MOVEI	B,2		; SET ANSWER TO 2 FOR NOW
	MOVEM	B, @1(Q)	;...
	SWITCH	B,		;GET DATA SWITCHES FROM MONITOR
	TDNN	B, A		;IS PROPER SWITCH ON?
	SOS	@1(Q)		; NO, CHANGE ANSWER TO ONE
	JRA	Q, 2(Q)		;EXIT

	PRGEND
TITLE	RAN	V.032(323)	GENERATE RANDOM NUMBER FUNCTION
SUBTTLE   24-OCT-1971     BRUNO G. DUERR/KK/TWE

;PSEUDO RANDOM NUMBER GENERATOR AND INITIALIZING ROUTINE
;METHOD SUGGESTED BY D. H. LEHMER


;CALLING SEQUENCE FOR FUNCTION RAN:

;JSA Q,RAN
;EXP   ARG     (DUMMY ARGUMENT)
;ANSWER IS RETURNED IN ACCUMULATOR A AS A SINGLE
;PRECISION FLOATING POINT NUMBER IN THE RANGE
;0<X<1


;CALLING SEQUENCE FOR INITIALIZING SUBROUTINE SETRAN:

;JSA Q,SETRAN
;EXP   ARG (ARG IS THE ADDRESS OF A POSITIVE INTEGER <2**31)
;NOTE: IF ARG CONTAINS 0 A STANDARD STARTING VALUE IS TAKEN INSTEAD


;CALLING SEQUENCE FOR SAVRAN
	
;JSA Q,SAVRAN
;EXP ARG   (WHERE ARG IS THE ADDRESS FOR THE LAST RANDOM
;           NUMBER TO BE STORED IN INTEGER MODE)


	ENTRY RAN,SETRAN,SAVRAN
	SEARCH DEF40

	SIXBIT/RAN/
RAN:	Z
	MOVE A,K	;GET K [14**29(MOD2**31 -1)]
	MUL A,XN	;MULTIPLY WITH LAST RANDOM NUMBER
	ASHC A,4	;SEPARATE RESULT IN TWO 31 BIT WORDS
	LSH B,-4
	ADD A,B		;ADD THEM TOGETHER
	TLZE A,760000	;SKIP IF RESULT < 31 BITS
	ADDI A,1
	MOVEM A,XN	;STORE NEW RN IN INTEGER MODE
	HLRZ B,A	;CONVERT TO FP IN TWO STEPS IN
	FSC B,216	;ORDER TO LOOSE NO LOW ORDER
	HRLI A,A	;BITS
	FSC A,174
	FAD A,B
	JRA Q,1(Q)	;RETURN TO CALLING PROGRAM
K:	^D630360016	;14**29(MOD 2**31 -1)
XN:	^D524287	;STARTING VALUE



	SIXBIT/SETRAN/
SETRAN:	Z
	MOVE A,@0(Q)	;GET ARGUMENT FROM CALLING PROGRAM
	TLZ A,760000	;MASK 5 BITS FOR SAFETY
	CAIN A,0	;SKIP IF ARGUMENT NONZERO
	MOVE A,X0	;GET STANDARD STARTING VALUE
	MOVEM A,XN
	JRA Q,1(Q)	;RETURN
X0:	^D524287	;STANDARD STARTING VALUE FOR RAN


	SIXBIT/SAVRAN/
SAVRAN:	Z
	MOVE A,XN	;LAST RANDOM NUMBER TO AC0
	MOVEM A,@0(Q)	;STORE IN INTEGER MODE
	JRA Q,1(Q)	;RETURN

	PRGEND
TITLE	ERRSET	V.032(323)	SET MAXIMUM ERROR COUNT
SUBTTL	24-OCT-1971	T EGGERS/DMN/TWE

	ENTRY	ERRSET
	EXTERN	ERRMX.
	SEARCH	DEF40

	SIXBIT /ERRSET/
ERRSET:	0
	MOVE	A,@(Q)		;GET MAXIMUM ERROR NUMBER
	MOVEM	A,ERRMX.	; AND STORE AWAY
	JRA	Q,1(Q)		;RETURN

	PRGEND
TITLE	OVERFL	V.032(323)	ARITHMETIC OVEFLOW TESTING PROGRAM
SUBTTL	24-OCT-1971	T. EGGERS/DMN/TWE

;THIS ROUTINE IS CALLED IN THE FOLLOWING MANNER:
;	JSA	Q,OVERFL
;	EXP	J
;IF OVERFLOWS HAVE OCCURRED, THE ANSWER IS SET TO 1, AND THE
;COUNTER IS CLEARED. IF THE OVERFLOW COUNTER IS 0, THE ANSWER
;IS SET TO 2.

SEARCH	DEF40
ENTRY	OVERFL
EXTERN	OVCNT.

	SIXBIT /OVERFL/
OVERFL:	0
	SETZM	@(Q)		;CLEAR OUT ANSWER WORD
	AOS	@(Q)		;SET ANSWER TO 1
	SKIPN	OVCNT.		;ANY OVERFLOWS?
	AOS	@(Q)		;NO, SET ANSWER TO 2
	SETZM	OVCNT.		;RESET OVERFLOW COUNTER
	JRA	Q,1(Q)		;RETURN

	PRGEND
TITLE	OXFIX - DUMMY ROUTINE FOR USE WITH LIB40 MATH PROGRAMS
SUBTTL	TWT/DMN	V32(332)	5-NOV-71

COMMENT \

	THIS ROUTINE IS A DUMMY ROUTINE FOR USE WITH THE LIB40 MATH
ROUTINES. IT SHOULD BE INCLUDED IN LIB40 AT THE VERY END.

	THIS ROUTINE IS DESIGNED TO TIDY UP THE EXTERNAL REQUESTS FOR
TYPER., AND OVPC. THAT OCCUR IN MANY LIB40 MATH ROUTINES. IT IS IN-
TENDED FOR MACRO OR LISP PROGRAMS THAT WISH TO USE THE MATH ROUTINES,
BUT DO NOT WISH, OR ARE UNABLE, TO GET TANGLED UP WITH ALL THE
UNDERGROWTH IN FORSE WHICH IS NORMALLY ENTRAINED BY THESE TWO SYMBOLS.

	ROUTINE TYPER. NORMALLY OUTPUTS DIAGNOSTICS WHEN SOME ERROR IS
DETECTED BY A MATH ROUTINE. THE DUMMY VERSION HEREIN TYPES OUT
 CERTAIN ROUTINE-SPECIFIC MESSAGES ONLY, E.G. SQUARE ROOT OF NEGATIVE
NUMBER.
	THE ROUTINE ERRSET MAY BE USED TO LIMIT THIS TYPEOUT: ITS
ARGUMENT IS RE-SPECIFIED TO BE THE MAXIMUM NUMBER OF ERROR MESSAGES
** OF ALL KINDS ** THAT MAY BE TYPED (NOT NUMBER OF MESSAGES OF EACH
KIND). THE DEFAULT SETTING IS A TOTAL OF 2 ERROR MESSAGES.

	OVPC. CONTAINS THE PC WORD ON AN APR TRAP. IT IS USED BY
CEXP.2,EXP2,ATAN2,AMOD TO TAKE SPECIAL ACTION WHEN ARITHMETIC OVER- OR
UNDERFLOW IS TRAPPED BY THE PROCESSOR. SINCE THESE ROUTINES, AND MANY
OTHERS, DEPEND ON THE ENABLING OF THE APR ARITHMETIC TRAPS (AND THEIR
HANDLING BY THE TRAPS.MAC ROUTINE) FOR THESE SPECIAL EFFECTS, PRO-
GRAMS CRITICALLY DEPENDENT ON SUCH EFFECTS HAVE NO CHOICE BUT TO LOAD
FORSE. HENCE HERE WE JUST SUPPLY A DUMMY INTERNAL TO SATISFY LOADER
REQUESTS FOR THIS SYMBOL.

\

ENTRY	TYPER.,OVPC.,ERRMX.
OVPC.:	0		;SPECIAL EFFECTS REQUIRE FORSE.

ERRMX.:	2		;DEFAULT = 2 ERR MSGS MAX.

TYPER.:	TLNE	0,-1	;A TYPEABLE ERROR?
	SOSGE	ERRMX.	;YES - ALLOWED TO TYPE IT?
	JRST	CPOPJ	;NO! JUST RETURN
	HLRZ	0,0	;GET ADDR OF MESG WHERE WE CAN USE IT
	OUTSTR	CRLF
	OUTSTR	@0	;TYPE SUPPLIED MSG
	OUTSTR	CRLF
CPOPJ:	POPJ	17,

CRLF:	ASCIZ	\
\

	END
  U r